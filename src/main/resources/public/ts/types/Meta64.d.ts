import * as I from "./Interfaces";
import { MenuPanel } from "./MenuPanel";
export declare class Meta64 {
    postConstruct(_f: any): void;
    menuPanel: MenuPanel;
    state: {
        prevPageExists: boolean;
        nextPageExists: boolean;
        selNodeCount: number;
        highlightNode: any;
        selNodeIsMine: boolean;
        homeNodeSelected: boolean;
        importFeatureEnabled: boolean;
        exportFeatureEnabled: boolean;
        highlightOrdinal: number;
        numChildNodes: number;
        canMoveUp: boolean;
        canMoveDown: boolean;
        canCreateNode: boolean;
        propsToggle: boolean;
        allowEditMode: boolean;
    };
    appInitialized: boolean;
    curUrlPath: string;
    urlCmd: string;
    homeNodeOverride: string;
    codeFormatDirty: boolean;
    nextGuid: number;
    userName: string;
    deviceWidth: number;
    deviceHeight: number;
    homeNodeId: string;
    homeNodePath: string;
    isAdminUser: boolean;
    isAnonUser: boolean;
    anonUserLandingPageNode: any;
    allowFileSystemSearch: boolean;
    treeDirty: boolean;
    uidToNodeMap: {
        [key: string]: I.NodeInfo;
    };
    uidToNodeDataMap: {
        [key: string]: Object;
    };
    idToNodeMap: {
        [key: string]: I.NodeInfo;
    };
    aceEditorsById: any;
    nextUid: number;
    identToUidMap: {
        [key: string]: string;
    };
    parentUidToFocusNodeMap: {
        [key: string]: I.NodeInfo;
    };
    MODE_ADVANCED: string;
    MODE_SIMPLE: string;
    editModeOption: string;
    showProperties: boolean;
    showMetaData: boolean;
    simpleModeNodePrefixBlackList: any;
    simpleModePropertyBlackList: any;
    readOnlyPropertyList: any;
    binaryPropertyList: any;
    selectedNodes: any;
    expandedAbbrevNodeIds: any;
    currentNodeData: I.RenderNodeResponse;
    renderFunctionsByJcrType: {
        [key: string]: Function;
    };
    propOrderingFunctionsByJcrType: {
        [key: string]: Function;
    };
    userPreferences: I.UserPreferences;
    setNodeData: (uid: string, data: Object) => void;
    getNodeData: (uid: string, prop: string) => any;
    updateMainMenuPanel: () => void;
    inSimpleMode: () => boolean;
    refresh: () => void;
    rebuildIndexes: () => void;
    goToMainPage: (rerender?: boolean, forceServerRefresh?: boolean) => void;
    selectTab: (pageName: any) => void;
    changePage: (pg?: any, data?: any) => any;
    isNodeBlackListed: (node: any) => boolean;
    getSelectedNodeUidsArray: () => string[];
    getSelectedNodeIdsArray: () => string[];
    getSelectedNodesAsMapById: () => Object;
    getSelectedNodesArray: () => I.NodeInfo[];
    clearSelectedNodes: () => void;
    updateNodeInfoResponse: (res: any, node: any) => void;
    updateNodeInfo: (node: I.NodeInfo) => void;
    getNodeFromId: (id: string) => I.NodeInfo;
    getPathOfUid: (uid: string) => string;
    getHighlightedNode: () => I.NodeInfo;
    highlightRowById: (id: any, scroll: any) => void;
    highlightNode: (node: I.NodeInfo, scroll: boolean) => void;
    updateState: () => void;
    refreshAllGuiEnablement: () => void;
    getSingleSelectedNode: () => I.NodeInfo;
    getOrdinalOfNode: (node: I.NodeInfo) => number;
    getNumChildNodes: () => number;
    setCurrentNodeData: (data: I.RenderNodeResponse) => void;
    anonPageLoadResponse: (res: I.AnonPageLoadResponse) => void;
    removeBinaryByUid: (uid: any) => void;
    initNode: (node: I.NodeInfo, updateMaps?: boolean) => void;
    initConstants: () => void;
    initApp: () => void;
    addTypeHandlers: (typeName: string, renderFunction: Function, orderingFunction: Function) => void;
    initStaticHtmlOnClicks: () => void;
    processUrlParams: () => void;
    tabChangeEvent: (tabName: any) => void;
    displaySignupMessage: () => void;
    screenSizeChange: () => void;
    loadAnonPageHome: (ignoreUrl: any) => void;
    saveUserPreferences: () => void;
    openSystemFile: (fileName: string) => void;
    clickOnNodeRow: (uid: any) => void;
    replyToComment: (uid: any) => void;
    openNode: (uid: any) => void;
    createSubNode: (uid?: any, typeName?: string, createAtTop?: boolean) => void;
    insertNode: (uid?: any, typeName?: string) => void;
    runEditNode: (uid: any) => void;
    moveNodeUp: (uid?: string) => void;
    moveNodeDown: (uid?: string) => void;
    clickOnSearchResultRow: (rowElm: any, uid: any) => void;
    clickSearchNode: (uid: string) => void;
    onSignIn: (googleUser: any) => void;
}
