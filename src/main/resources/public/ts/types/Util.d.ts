import * as I from "./Interfaces";
export declare class Util {
    postConstruct(_f: any): void;
    logAjax: boolean;
    timeoutMessageShown: boolean;
    offline: boolean;
    waitCounter: number;
    pgrsDlg: any;
    buf2hex: (arr: Uint8Array) => string;
    hex2buf: (str: any) => Uint8Array;
    escapeRegExp: (s: string) => string;
    escapeForAttrib: (s: string) => string;
    unencodeHtml: (s: string) => string;
    replaceAll: (s: string, find: string, replace: string) => string;
    contains: (s: string, str: string) => boolean;
    startsWith: (s: string, str: string) => boolean;
    endsWith: (s: string, str: string) => boolean;
    chopAtLastChar: (str: string, char: string) => string;
    stripIfStartsWith: (s: string, str: string) => string;
    arrayClone(a: any[]): any[];
    arrayIndexOfItemByProp: (a: any[], propName: string, propVal: string) => number;
    arrayMoveItem: (a: any[], fromIndex: number, toIndex: number) => void;
    stdTimezoneOffset: (date: Date) => number;
    dst: (date: Date) => boolean;
    indexOfObject: (arr: any[], obj: any) => number;
    assertNotNull: (varName: any) => void;
    private _ajaxCounter;
    daylightSavingsTime: boolean;
    getCheckBoxStateById: (id: string) => boolean;
    toJson: (obj: Object) => string;
    getParameterByName: (name?: any, url?: any) => string;
    initProgressMonitor: () => void;
    progressInterval: () => void;
    getHostAndPort: () => string;
    ajax: <RequestType, ResponseType>(postName: string, postData: RequestType, callback?: (response: ResponseType) => void) => any;
    logAndThrow: (message: string) => never;
    logAndReThrow: (message: string, exception: any) => never;
    ajaxReady: (requestName: any) => boolean;
    isAjaxWaiting: () => boolean;
    focusElmById: (id: string) => void;
    isElmVisible: (elm: HTMLElement) => boolean;
    delayedFocus: (id: string) => void;
    checkSuccess: (opFriendlyName: any, res: any) => boolean;
    showMessage: (message: string) => void;
    addAll: (obj: any, a: any) => void;
    nullOrUndef: (obj: any) => boolean;
    getUidForId: (map: {
        [key: string]: string;
    }, id: any) => string;
    elementExists: (id: any) => boolean;
    getTextAreaValById: (id: any) => string;
    domElm: (id: any) => HTMLElement;
    setInnerHTMLById: (id: string, val: string) => void;
    setInnerHTML: (elm: HTMLElement, val: string) => void;
    poly: (id: any) => any;
    polyElm: (id: string) => any;
    polyElmNode: (id: string) => any;
    isObject: (obj: any) => boolean;
    currentTimeMillis: () => number;
    emptyString: (val: string) => boolean;
    getInputVal: (id: string) => any;
    setInputVal: (id: string, val: string) => boolean;
    bindEnterKey: (id: string, func: Function) => void;
    verifyType: (obj: any, type: any, msg: string) => boolean;
    setHtml: (id: string, content: string) => void;
    setElmDisplayById: (id: string, showing: boolean) => void;
    setElmDisplay: (elm: any, showing: boolean) => void;
    getPropertyCount: (obj: Object) => number;
    forEachElmBySel: (sel: string, callback: Function) => void;
    mergeProps: (dst: Object, src: Object) => void;
    forEachProp: (obj: Object, callback: I.PropertyIterator) => void;
    forEachArrElm: (elements: any[], callback: Function) => void;
    printObject: (obj: Object) => string;
    printKeys: (obj: Object) => string;
    setEnablement: (elmId: string, enable: boolean) => void;
    getInstance: <T>(context: Object, name: string, ...args: any[]) => T;
    setCookie: (name: string, val: string) => void;
    deleteCookie: (name: string) => void;
    getCookie: (name: string) => string;
    changeOrAddClassToElm: (elm: HTMLElement, oldClass: string, newClass: string) => void;
    changeOrAddClass: (id: string, oldClass: string, newClass: string) => void;
    removeClassFromElmById: (id: string, clazz: string) => void;
    removeClassFromElm: (el: any, clazz: string) => void;
    addClassToElmById: (id: any, clazz: string) => void;
    addClassToElm: (el: any, clazz: string) => void;
    toggleClassFromElm: (el: any, clazz: string) => void;
    getPassword: () => Promise<string>;
    copyToClipboard: (text: any) => void;
}
